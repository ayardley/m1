# Copyright (C) 2012, Parrot Foundation.

=head1 PDD XX: M1 Design and Implementation Spec

=head2 Abstract

M1 refers to a C-like language targeting the M0 "virtual machine". That is,
M0 can be considered as a virtual machine which defines an instruction set
and a computation model. Details of M0 can be found in [1].

The M1 compiler is reentrant, which means it is thread-safe. This allows to 
invoke another instance of the M1 compiler if it's already running.

=head2 Status

See the TODO file for the current status.

=head2 Design Principles of M1

A few basic design principles (so-called I<key drivers>) drove the design
of M1:

=over 4

=item * Maintainability

=item * High-quality output (i.e., M0 instructions)

=item * Extensibility (e.g., easy to add another phase to the compilation process)

=item * Ease of implementation 

=back

=head3 Differences with C

Compared to C, M1 has:

=over 4

=item * a built-in C<string> type;

=item * a built-in C<bool> type;

=item * a C++-class-style construction for defining PMCs, including inheritance;

=item * a simpler (and more restrictive) grammar;

=item * no C<goto> statement (to prevent spaghetti code)

=item * namespaces {{XXX do we want that?}}

=item * a try-catch statement {{XXX if we get that working}}

=item * nested multi-line comments (/* comment 1 /* nested comment */ comment 1 part 2 */ )

=item * no pointers; instead, structs and PMCs are treated as references (similar to Java).

=back

Other differences with C include the following.


=head2 M1 Milestones

Completed milestones: (for varying interpretations of "completed")

=over 4

=item * assignments

=item * iterating statements (while, do-while, for)

=item * conditional statements (if/else, switch)

=item * arrays; read and write

=item * structs; read and write

=item * function calls and returns

=item * register allocator

=item * semantic checker

=back

Incomplete milestones:

=over 4

=item * bug-free function calls

=item * Enumerations

=item * PMC definitions

=item * methods (as part of a PMC)

=item * vtable methods (virtual methods)

=item * PMC inheritance

=item * namespaces

=item * module system (preprocessor?)

=item * optimization phase

=back

=head2 Architecture overview

The M1 compiler follows the so-called C<batch-sequential> architecture> [2], which
is a variant of the better known C<pipes-and-filters> architectural pattern. The
key difference is that in a pipes-filter architecture, the next filter can already
start processing before the filter before it has finished. In the M1 compiler, all
text needs to be parsed before semantic analysis and other phases can start.

Each phase of the compiler is one "filter". The M1 compiler has the following phases:

=over 4

=item 1. Lexical and grammatical analysis (combined, as is usual for compilers).

=item 2. Semantic analysis/type checking.

=item 3. Instruction generation. 

=item 4. Optimization and register optimization. (not implemented)

=item 5. File generation (writing instructions to an M0 file). (not implemented)

=back

Lexical analysis refers to the tokenization of the input file. Grammatical analysis
refers to parsing the input stream of tokens. The compiler invocation starts
with the grammar, which requests tokens from the lexer as needed until end of file
is reached. During the parse, an Abstract Syntax Tree (AST) is constructed for
later phases.

After the parse, the AST is passed on to the semantic analysis phase. In this phase,
the compiler performs a number of type checks. Also, the semantic analysis phase
visits all nodes and finds the right type information for variables. In this 
process, pointers are set to type definitions. In the parsing phase, a variable
may be declared of a type that has not been parsed itself yet. 

After the type checking phase, the code generation phase traverses the AST, and
generates appropriate instructions for each node. 



=head2 Implementation

M1 is implemented in C. The lexer is implemented using the Flex lexer generator. 
The parser is implemented using the Bison parser generator. Flex and Bison are
more modern implementations of the well-known Lex and Yacc tools, respectively.
The choice for these tools is grounded in the fact that the precise definition 
of M1 was expected to be in flux in this early stage, and the need for maintainability.

The current implementation consists currently of about 8,000 lines of code, using 
SLOCcount [3], though it is expected this will go up to 10,000 when the implementation 
is finished.

The implementation consists of the following files:

=over 4

=item m1.l - lexer specification.

=item m1.y - parser specification.

=item ast.{c,h} - abstract syntax tree nodes definitions and constructors.

=item eval.{c,h} - code to generate M1 code from the AST. This is to ensure that the compiler
can generate the same code as it has parsed.

=item semcheck.{c,h} - implementation of the semantic check phase.

=item instr.{c,h} - structures and code to represent M0 instructions.

=item decl.{c,h} - structures and code to represent type declarations {{XXX needs better name}}

=item gencode.{c,h} - code generation.

=item stack.{c,h} - implementation of a stack

=item symtab.{c,h} - symbol table implementation.

=item ann.h - code annotation #defines for splint. {{XXX needs better name}}

=back

=head3 Type declarations

M1 has a number of built-in types. These are:

=over 4

=item * int

=item * num

=item * string

=item * char

=item * bool

=back

Besides these built-in types, M1 supports the notion of aggregate types; you can
define a C<struct>, which is essentially the same as a C struct, in which all attributes
(member fields) are publicly accessible. An M1 struct is therefore just a means to 
bundle a number of related variables.

Besides structs, M1 allows you to write PMCs. A PMC is a Parrot Magic Cookie, or
Poly-Morphic Container. The PMC is the magic means through which Parrot supports
language-dependent behavior. A PMC can be compared to a C++ class definition.

{{XXX need to see whether inheritance and vtables can be implemented.}}

=head3 Variable declarations

=head3 Assignments

Assignments are as simple as:

 lvalue '=' rvalue 
 
Assignments can be chained; that is, you can write:

 int a, b, c;
 
 a = b = c = 42; // initializes a, b, and c to 42.
 

=head3 Arrays

Arrays, when declared, are auto-vivivied. This means that code is generated to 
allocate memory for them. For instance, the following declaration:

 int x[10]; 
 
will allocate 10 * sizeof(int) bytes on the heap. 


=head2 Subsystems

This section describes a number of subsystems and how they work.

=head3 Variable declarations

Variable declarations are stored in the AST by C<m1_var> nodes. For each
variable that is declared, a new C<m1_symbol> is also created and inserted
into the currently active symbol table. The AST node (C<m1_var>) has a pointer
to the C<m1_symbol> structure. 

=head3 Type definitions

Types are represented by a C<m1_decl> struct instance. For each built-in type,
the compiler inserts a new C<m1_decl> into the type declaration table. For each
user-defined type (structs, unions, PMCs and enums), a new C<m1_decl> is created.

The typechecker (in semcheck.c) works mostly with these C<m1_decl> nodes. Since
there is exactly one C<m1_decl> node for each type, the typechecker compares
types by doing pointer-comparisons. That is:

 m1_decl *ltype;
 m1_decl *rtype; 
 
 ... // assign ltype and rtype
 
 if (ltype != rtype) { // error! types do not match.
 


=head3 Symbols 

For each variable declaration, a C<m1_symbol> struct instance is created, which is 
stored in the currently active symbol table. Which table this is depends on the 
situation. If a C<struct>, C<union> or C<PMC> is parsed, this will be the symbol
table for that C<struct> (or C<union> or C<PMC>). Whenever a variable declaration
is parsed in a function body (including parameters), they will be entered into 
the symbol table that is active for that C<block>.

Each nested scope (I<block>) has its own symbol table. The following code 
illustrates what this implies:

 int main() 
 { // scope for "main"
 
    int i;
    
    { // new scope
       int i; // will result in an error, as it is hiding the variable i above
       int j;  
    }
    
    {
       int j; // ok, as this is a different scope/block from above.
    }
 }
       
    


=head3 Register allocation and de-allocation

M1 has a nifty register allocation system. Three functions are the core of this
system:

=over 4

=item * void alloc_reg(M1_compiler *c, m1_valuetype type);

=item * void free_reg(M1_compiler *c, m1_reg r);

=item * void freeze_reg(M1_compiler *c, m1_reg r);

=back

Whenever a new register is needed, for instance, to store a result of a calculation,
you can allocate one with C<alloc_reg>. This function takes as a second parameter
the type that the register should be (int, num, string or pmc). 

Once you're done with a register, and you know that you won't need it any longer,
then you can give it back to the register manager. This will make the register
available; next time you invoke C<alloc_reg>, you might end up with the register
you just freed.

In cases where you want to allocate a register to a symbol (a declared variable),
you can I<freeze> the register by calling C<freeze_reg>. It takes as an argument
the register you want to freeze. This means that the register will be reserved
for the symbol that you assign the register number to (a C<m1_symbol> structure
stores the register). The C<freeze_reg> function ensures that, even if you call
C<free_reg> on a register, it won't be released.

In general, C<free_reg> can be called on register that are just popped off the
C<regstack>. If you allocate register that you push onto the C<regstack>, then
obviously you should B<not> free it, as you're making it available to other 
code generation functions that will use it.

=head2 M1 Language Specification

=head3 M1 Lexical specification

The following words are reserved and cannot be used as identifier:

 bool
 break
 case
 char
 const
 continue
 default
 do
 else
 false
 for 
 if
 int
 null
 num
 pmc
 return
 string
 struct
 switch
 true
 while

=head3 M1 Grammar

The grammar of M1 is expressed using EBNF notation below. Note that this EBNF notation
differs from the Bison specification, as Bison expects a certain formatting of the
grammar rules.

M1-program: chunk+

 chunk: function-def
      | pmc-def
      | struct-def
      | enum-def
      | namespace
      
 pmc-def: pmc NAME extends-clause { struct-member* pmc-method* }
 
 pmc-method: vtable? method type NAME block      
     
 struct-def: struct NAME { struct-member+ }      

 struct-member: type NAME ;

 function-def: type NAME ( parameters? ) block

 parameters: parameter [, parameter]*

 parameter: type NAME

 enum-def: enum NAME { enum-constant [, enum-constant]* }

 enum-constant: NAME [= INTEGER]?
         
 block: { statement* }    

 statement: assignment
          | if-stat
          | while-stat
          | do-while-stat
          | break-stat
          | continue-stat
          | for-stat
          | switch-stat
          | return-stat
          | funcall-stat
          | block
          | var-decl
          | const-decl
         
 assignment: lvalue '=' expression ;
           | lvalue '=' assignment ;
           | assignop-expr

 assignop-expr: lvalue assignop rvalue ;

 assignop: += | -= | *= | /= | %= | >>= | <<= | &= | |=

 if-stat: if ( expression ) statement [else statement]?

 while-stat: while ( expression ) statement

 do-while-stat: do { statement* } while ( expression ) ;

 for-statement: for ( for-init? ; for-cond? ; for-step? ) statement

 break-stat: break
 
 continue-stat: continue

 switch-stat: switch ( expression ) { case* default-case? }

 case: case INTEGER : statement*

 default-case: default : statement *
  
 return-stat: return expression? ;

 funcall-stat: funcall ';'

 funcall: lvalue ( arguments? )

 arguments: argument [, argument]*

 argument: expression
              
 expression: INTEGER
           | NUMBER
           | STRING
           | CHAR
           | true
           | false
           | null
           | new NAME ( arguments? )
           | expression ? expression : expression
           | expression binop expression
           | unop expression
           | funcall
           | target
           | lvalue ++
           | lvalue --
           | ++ lvalue
           | -- lvalue
           | ( expression )
          

 binop: + | - | * | % | / | >> | << | > | < | >= | <= | == | != | = | & | "|" | && | "||"
     

 unop: ! 
     | -
     | ~
              
 target: object field-access*

 object: NAME
       | self
       | super
      
 field-access: "." NAME
             | "[" expression "]"
                       
              
              
 type: native-type
     | userdefined-type
    
 native-type: int
            | num
            | char
            | string
            | bool         

=head3 M1 Semantic rules


=head2 References

[1] PDD 32: M0 Design Spec

[2] Paris Avgeriou and Uwe Zdun, Architectural Patterns Revisited - A Pattern Language
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.141.7444&rep=rep1&type=pdf

[3] http://www.dwheeler.com/sloccount/

=cut

__END__
Local Variables:
  fill-column:78
End:
