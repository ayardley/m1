TODO
====

How can you help?
-----------------
If you're interested in M1 and M0, contributions in the following
areas are particularly welcome:
* writing tests (try to break M1!).
* figure out how to do modules (multi-file programs)
* figure out how to do pointers and/or references (Java-like).
* can we do exceptions at this level/
* How to do vtables? 
* Ideas for an optimizer? register allocator? 
* a disassembler to generate M1?
* a profiler?
* other developers' tools?
* Just review the code, and ask questions to clarify. These will be rewarded with documentation that explains it. 


What's working?
---------------
* simple declarations and initializations (int x; int y = 1;).
* simple assignments (x = 42;).
* while loops
* do-while loops
* if-statements
* for-statements
* break statements (in loops)
* continue statements (in loops)
* switch statements
* boolean expressions (>, <)
* !, && and || logical operators.
* math expressions (+, -, /, etc.)
* ==, !=, >, <, <=, >= comparison operators.
* pre and postfix ++ and -- operators.
* unary minus op.
* array access (x[42] = 3; x = y[3])
* field access (x.y = 3; )
* function calls and returns.
* nested scopes.
* type checking (separate phase of compiler)

What's not working?
-------------------
* parameters/arguments/return values.
* namespaces
* PMC definitions (incl methods)
* return statements
* pointers, objects (int *x;), null, new.m
* self, super
* import statement.
* try/catch statement (needed?)
* complex arrays (multidimensional)


short-term roadmap:
-------------------
* look into vtable implementation for PMCs for calling member functions x.y();
* think about a module management system. No preprocessor please. Maybe similar to Java's import statement. This might include namespaces, and also private and public scopes for modules (keywords needed?)
* generate instructions (struct instances) rather than print directly to stdout. This will allow analysis and optimization.

random list of items:
---------------------
* implement parameter and argument handling
* implement namespaces and their handling
* implement PMCs
* any other keywords? e.g., continue? 
* implement semantic checker (a thorough one!)
* finish code generator
* do we want member functions: x.y(); ? (prob for PMCs)
* exception handling at this level?
* free all memory after done.
* an optimizer, perhaps implemented in yet another bison-based grammar; based on certain patterns of intructions that are generated, some instructions can be removed. 
* A register allocator (linear-scan algorithm), to minimize register usage.
* add "const" keyword where-ever possible to M1's source.
