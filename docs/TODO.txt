TODO
====

How can you help?
-----------------
If you're interested in M1 and M0, contributions in the following
areas are particularly welcome:
* writing tests (try to break M1!). Please add test files in the t/ folder.
* figure out how to do modules (multi-file programs)
* can we do exceptions at this level?
* Ideas for an optimizer? 
* a disassembler to generate M1?
* a profiler?
* other developers' tools?
* Just review the code, and ask questions to clarify. These will be rewarded with documentation that explains it. 


What's working?
---------------
* declarations and initializations (int x; int y = 1;).
* simple assignments (x = 42;).
* chained assignments (a = b = c = 42; )
* while loops
* do-while loops
* if-statements
* for-statements
* break statements (in loops)
* continue statements (in loops)
* switch statements
* !, && and || logical operators.
* ~, ^, & and | bitwise operators.
* math expressions (+, -, /, %, *)
* boolean operators (!, ==, !=, >, <, <=, >=)
* pre and postfix ++ and -- operators.
* unary minus op.
* single and multi-dimensional array access (x[42] = 3; x = y[3])
* field access (x.y.z = 3; )
* function calls and returns (including recursion).
* nested scopes.
* type checking (separate phase of compiler)
* PMC definitions
* tests run using "prove" (make test).
* basic register allocation.
* int, num, string and struct parameters and arguments.
* basic returning values. (still buggy).

What's not working?
-------------------
* consecutive function calls
* namespaces
* self, super
* import statement.
* try/catch statement (needed?)
* method calls on PMC instances.


other TODOs:
---------------------
* free all memory after done.
* an optimizer, perhaps implemented in yet another bison-based grammar; based on certain patterns of intructions that are generated, some instructions can be removed. 
* A register allocator (linear-scan algorithm), to minimize register usage.
* add "const" keyword where-ever possible to M1's source.
